user nginx;
worker_processes auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log /var/log/nginx/access.log;
    sendfile on;
    keepalive_timeout 65;
    client_max_body_size 100m;

    proxy_read_timeout 120s;
    proxy_connect_timeout 120s;
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
    client_body_timeout 120s;
    send_timeout 120s;

    fastcgi_buffer_size 32k;
    fastcgi_buffers 4 32k;

    server {
        server_name question-service.ru;
        listen 5.101.180.114:443 ssl http2;
        listen [2a03:f480:2:5::2c]:443 ssl http2;

        charset utf-8;

        ssl_prefer_server_ciphers on;
        ssl_ciphers EECDH:+AES256:-3DES:RSA+AES:RSA+3DES:!NULL:!RC4;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_session_cache shared:SSL:1m;
        ssl_certificate "/var/www/httpd-cert/question-service.ru.crt";
        ssl_certificate_key "/var/www/httpd-cert/question-service.ru.key";
        add_header Strict-Transport-Security "max-age=31536000" always;

        gzip on;
        gzip_proxied expired no-cache no-store private auth;
        gzip_types text/css text/xml application/javascript text/plain application/json image/svg+xml image/x-icon;
        gzip_comp_level 1;

        set $root_path /var/www/public;
        root $root_path;

        location / {
            proxy_pass http://127.0.0.1:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Port 443;
            proxy_read_timeout 60;
            proxy_connect_timeout 60;
            proxy_redirect off;
        }
    }

    server {
        server_name question-service.ru;
        listen 5.101.179.180:80;
        listen [2a03:f480:2:3::15]:80;

        return 301 https://$host$request_uri;
    }

    server {
        server_name localhost;
        listen 80 default_server http2;
        listen [::]:80 default_server http2;

        return 403;
    }
}
